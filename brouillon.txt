

Définissons maintenant les rôles attendus pour le CSP solver :
\begin{enumerate}
    \item Assurer la faisabilité du scénario ;
    \item Prédire les comportement à l'exécution :
    \begin{enumerate}
        \item Indiquer la propagation des contraintes (cf. figure \ref{figPropagation}) ;
        \item Détecter les dépendances de souplesse (cf. figure \ref{figPropagation}) .
    \end{enumerate}
\end{enumerate}

\begin{figure}[ht]
    \centering
    \illustrationKeepDim{propagation}
    \caption{La contrainte \contrainte{3} est propagée sur la contrainte \contrainte{1} ; la durée de \contrainte{3} est en revanche déterminée par \contrainte{1} car cette dernière se déroulera forcément en premier. \label{figPropagation}}
\end{figure}





\begin{figure}[ht]
    \centering
    \illustrationKeepDim{incoherence1}
    \caption{La date du Timenode 2 dépend d'un évènement futur. \label{figIncoherenceTemporelle}}
\end{figure}

\subsection{Indiquer la propagation des contraintes}

Indiquer la propagation des contraintes sert à indiquer l'intervalle réel pendant lequel un timenode pourra être éxécuté.


L'étude du \csp{} m'a amené à analyser d'autres aspects d'\iscore{} et de l'API \ossia{}, allant du formalisme de la composition interactive a l'étude du moteur d'exécution. Pour pouvoir assoir les bases du CSP, j'ai donc fait des proposition pour tenter d'apporter des réponses sur des éléments flou ou des situations problématiques.

Chaque version d\iscore{} est l'occasion de retoucher le formalisme des relations temporelles et de la composition de scénario en général. La dernière version ne déroge pas à la règle
















\subsubsection{Règles}
Au fil des scénarios et à force d'itérations, voici l'ensemble des règles que je propose, ainsi que les contrôles autorisés présentés sous forme de plusieurs scénarios explicites.

\emph{NOTE: la notion d'évènement n'a pas de sens ici.}
\begin{itemize}
    \item Un timenode possède obligatoirement une contrainte le reliant à une second timenode passé ou à l'instant 0;
    \item Une contrainte \contrainte{1} lie un timenode \timeNode{1} prédécesseur et un timenode \timeNode{2} successeur par une durée nominale \dureeNominale{1}, une souplesse en amont \souplesseAvant{1} et une souplesse en aval \souplesseApres{1}
    \begin{itemize}
        \item La durée nominale est définie telle que : $ \dureeNominale{1} \in \left [ O ... +\infty  \right [ $
        \item La souplesse en amont \souplesseAvant{1} est définie tel que : $ 0 \leq \souplesseAvant{1} \leq \dureeNominale{1} $
        \item La souplesse en aval \souplesseApres{1} est définie tel que : $ 0 \leq \souplesseApres{1} $
    \end{itemize}
\end{itemize}

Pour des simplifier certains calculs, on utilisera les valeurs de butée min et max :
\begin{itemize}
    \item La butée minimum calculée telle que : $ \buteeMin{1} = \dureeNominale{1} - \souplesseAvant{1} $
    \item La butée maximum calculée telle que : $ \buteeMax{1} = \dureeNominale{1} + \souplesseApres{1} $
\end{itemize}

On peut voir la représentation graphique de ces règles sur la figure \ref{figNotations}.

Cet ensemble de règles nous permet de donner une réponse à la question : "existe-t-il une ou plusieurs solutions?", pour pouvoir donner une solution optimale, il conviendra alors d'ajouter des critères pour guider la solution. Ces critères s'expriment par une fonction de poids définie en fonction d'une contrainte et d'une distance (la distance entre ses deux timenodes) 

La solution optimale se trouve alors en minimisant\footnote{On peut également choisir de maximiser, cela n'a que peu d'importance} le critère 
\[ \sum_{i=0}^{n} weightFunction(Tnext_{i} - Tprev_{i} , C_i) \]
avec $Tprev_i$~et $Tnext_i$~respectivement la date du timenode situé en amont et en aval de la contrainte \contrainte{i}.

Ces définition permettent de réaliser n'importe quels contrôles au niveau de l'interface, et surtout plusieurs niveau de latitude\footnote{L'interface peut définir elle même la position de chaque timenode, ou bien laisser le CSP calculer la solution.}.
\section{Implémentation}
\subsection{Choix d'une bibliothèque}
Je cherche un bibliothèque qui me permetra d'exprimer les contraintes sous leur forme mathémathique.

Voici les cas testés:
\subsubsection{Les scénarios valides}
pas plusieurs starts

reflexion : le comportement a la création d'un programme informatique : 

Edition:
Le développeur à toute libertée d'écrire n'importe quoi.
En utilisant un IDE, le user peut cependant avoir un retour sur la validité de son programme.

Compilation:
Seul un programme valide peut être compilé.

En programmation, cette méthode qui permet de passer par des états non valides pour atteindre des états valides et nécessaire, mais quand les le nombre d'éléments du formalisme et limité et surtout que l'on possède un éditeur de haut niveau (graphique)

Execution:
Un executable est forcément valide* pour l'éxécution

*LOL


matrice d'adjacence

gecode
cassowary
google or



autre

papiers:
merci a Simon Archipof pour les math et tout

constraint logic programmin survey :
\cite{jaffar1994constraint}

temporal constraint network :
\cite{dechter1991temporal}

mémoire de stage bruno valeze
\cite{valeze2006constraint}









%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








\chapter{Modélisation des relations temporelles}

Avec ce chapitre nous allons nous pencher sur le travail réalisé pendant le stage, tout d'abord prenons un aperçu en regardant la chronologie générale.
%
La première partie du stage à porté sur l'étude de la programmation par contrainte, ensuite le formalisme \ossia{} et le fonctionnement d'\iscore{} à été étudié, à été proposé un premier modèle minimal adapté uniquement à les gestion des contraintes induites par les relation temporelles.
%
La structure de données correspondant à ce premier modèle à été implémenté en \cpp{}, puis une étude des différents solveurs disponible à été réalisé dans le but d'exploiter ce modèle, le premier choix s'est porté sur \gecode{}\footnote{Pour rappel, \gecode{} est le solveur utilisé dans la version 0.2 d'\iscore{}} mais son installation s'est révélé trop complexe et trop coûteuse. Un deuxième examen des solveurs à révélé \google{} \ortools{}, qui à été utilisé par la suite.


Pour orienter les recherches, il est utile de partir sur une base bien définie. Or, le fonctionnement des contraintes et des interactions possibles n'est pas encore bien formalisé. Je vais donc tout d'abord expliciter le fonctionnement et le formaliser avec des règles qui seront la base de ma réflexion.

\section{Modèle pour l'édition}

Pour créer/éditer des scénarios interactifs, nous utilisons les éléments suivants :


À ces éléments de base viennent s'ajouter des éléments de plus haut niveau :
\begin{itemize}
    \item Un \gls{timenode} \startNode{}~qui est exécuté au temps zéro ;
    \item Un \gls{timenode} \finalNode{}~qui est exécuté à la fin du scénario.
\end{itemize}
Nous venons de citer les éléments de bases permettant de créer les scénarios, détaillons maintenant pas à pas les règles précises qui régissent les scénarios. Ces règles vont s'exprimer sous forme de contraintes, le CSP doit alors assurer que toutes ces contraintes soient respectées.

\subsubsection{Règles}%---------------------------------------------

\setcounter{equation}{0}
Nous appelons \textbf{date} du \gls{timenode}, la valeur de temps à laquelle une \gls{timenode} est exécuté. L'ensemble des valeurs possibles de la date d'un \gls{timenode} représente son \textbf{intervale d'exécution}.

Pour s'assurer qu'aucun évènement ne soit programmé pour être déclenché avant le début de notre scénario, nous ajoutons la contrainte suivante :

\begin{equation}
    \forall \timeNode{} \in Timenodes \setminus \{ \startNode \} : \timeNode{} >= \startNode
\end{equation}
soit : la date de chaque \gls{timenode} -- \startNode~excepté -- est supérieure ou égale à la date du \startNode.

De la même manière, nous allons nous assurer qu'aucun évènement ne puisse être déclenché après la fin du scénario.

\begin{equation}
    \forall \timeNode{} \in Timenodes \setminus \{ \startNode; \finalNode \} : \timeNode{} <= \finalNode
\end{equation}

soit : la date de chaque \gls{timenode} -- \startNode~et \finalNode~exceptés -- et inférieur à la date du \finalNode.

Pour la suite, explicitons ce qu'est une \gls{relationTemporelle} :

Une \gls{relationTemporelle} \contrainte{1} lie un \gls{timenode} \timeNode{1} prédécesseur et un \gls{timenode} \timeNode{2} successeur par une durée nominale \dureeNominale{1}, une souplesse en amont \souplesseAvant{1} et une souplesse en aval \souplesseApres{1}
\begin{itemize}
    \item La durée nominale est définie telle que : $ \dureeNominale{1} \in \left [ O ... +\infty \right [ $
    \item La souplesse en amont \souplesseAvant{1} est définie tel que : $ 0 \leq \souplesseAvant{1} $
    \item La souplesse en aval \souplesseApres{1} est définie tel que : $ 0 \leq \souplesseApres{1} $
\end{itemize}

Pour simplifier certains calculs, on utilisera les valeurs de butée min et max :
\begin{itemize}
    \item La butée minimum calculée telle que : $ \buteeMin{1} = \dureeNominale{1} - \souplesseAvant{1} $
    \item La butée maximum calculée telle que : $ \buteeMax{1} = \dureeNominale{1} + \souplesseApres{1} $
\end{itemize}

Ces intervalles sont montrés visuellement sur la figure \ref{figNotations}.

\begin{figure}[ht]
    \centering
    \illustrationKeepDim{composants2}
    \caption{La représentation graphique utilisée : (a) \gls{timenode}, (b) contrainte, (c) durée nominale, (d) souplesse amont, (e) souplesse aval, (f) butée minimum, (g) butée maximum, (h) contrainte avec souplesse aval infinie, (i) contrainte avec souplesse aval nulle et et souplesse amont au maximum. \label{figNotations}}
\end{figure}

Nous voulons que l'intervalle de déclenchement d'un \gls{timenode} dépende des contraintes qui le précèdent, nous avons donc la contrainte suivante : 

\begin{gather*}
    \forall \contrainte{}~reliant~\timeNode{1}~a~\timeNode{2}~:\\
    \timeNode{1} + \buteeMin{1} \leq \timeNode{2}\\
    \timeNode{2} \leq \timeNode{1} + \buteeMax{1}
\end{gather*}

\subsubsection{Assurer la faisabilité du scénario}

Pour vérifier la faisabilité du scénario, on peut voir plusieurs approches (cf figure \ref{figPackages}) :
\begin{enumerate}
    \item En entrée du CSP sont fournis les contraintes et on confronte les valeurs des timenodes donnés et l'on retourne true si la configuration est valide ;
    \item En entrée du CSP sont fournis uniquement les contraintes et l'on retourne true si la configuration est valide ;
    \item En entrée du CSP ne sont fournis que les contraintes et sont retournées les valeurs des timenodes si la configuration est valide.
\end{enumerate}

\begin{figure}[ht]
    \centering
    \illustrationKeepDim{package}
    \caption{Les différentes approches. (a) : première approche ; (b) deuxième approche ; (b) troisième approche \label{figPackages}}
\end{figure}

La première approche amène une solution triviale car la question posée est : \emph{est-ce que cette solution est valide?} Il suffit de confronter individuellement chaque contrainte aux valeurs de ses timenodes attachés, on pourra indiquer les contraintes violées.

La deuxième approche consiste à répondre à la question : \emph{est-ce qu'une solution existe ?}

La troisième approche est la plus complexe mais sans doute la plus intéressante car elle consiste à répondre à : \emph{Si cela est possible, donne moi une solution ?} Ce problème est le plus complexe et demande de proposer des critères à minimiser et/ou de permettre à l'utilisateur de les définir. 

Je pense qu'il est possible de combiner les avantages de toutes ses approches en une seule qui est la suivante (cf figure \ref{figPackages2}) :
On fournit toutes les contraintes ainsi qu'un nombre quelconque de dates, et on peut alors demander au système de calculer une solution optimale s'il en existe plusieurs, soit la solution unique, ou bien simplement lui demander si l'équation est valide.

\begin{figure}[ht]
    \centering
    \illustrationKeepDim{package2}
    \caption{L'approche alternative \label{figPackages2}}
\end{figure}

\subsubsection{Comportement}

% pour le scénario c1, est il logique d'associer de contrainte de durée nominale différentes à un même timenode?

Pour ce faire, je vais proposer des scénarios d'utilisations pour illustrer les comportements attendus, cela va m'orienter vers un formalisme qui se voudra le plus simple possible.

\begin{figure}[ht]
    \centering
    \illustrationKeepDim{diagrammeDeploiment}
    \caption{ Déploiement logiciel de la solution.\label{figDeploiement}}
\end{figure}

Pour guider ma démarche je suivrai les principes suivants :
\begin{itemize}
    \item Réduire le nombre de règles/éléments au minimum pour faciliter la démontrabilité et les manipulations, quitte à devoir ajouter du sucre ;
    \item Autoriser un maximum les interactions\footnote{User doit être bloqué au minimum sur les contrôles normalement disponibles.} ;
    \item Le positionnement des éléments est cohérent par rapport à l'éxécution du scénario et non à des préférences visuelles\footnote{L'affichage du scénario doit correspondre avec une réalité temporelle, il ne devrait pas y avoir plusieurs moyens de l'afficher (mis à part peut-être sur l'axe des Y)} ;
    \item Interdire les actions incohérentes, quitte à informer l'utilisateur de ses "erreurs" ;
    \item Les intervalles de temps sont des informations essentielles à l'execution du scénario .
    %\item Pour fournir des solutions on gardera en tête le comportement à l'exécution\footnote{Cela nous oriente pour choisir les critères à minimiser/maximiser pour obtenir des solutions optimales} .
\end{itemize}

\subsection{souplesse d'édition}
Ce stage est l'occasion d'apporter une nouvelle réflexion sur l'outil. Il reste des questions en suspens quant au comportement désiré de l'application lors de l'édition de scénarios interactifs\footnote{par exemple interdit-t-on de créer des situations impossible lors de l'édition?}.


Ces informations sont pourtant essentielles pour définir le rôle du CSP et je vais donc me pencher dessus en essayant une analogie avec la programmation de logiciels.

Dans le but de définir les rôles du \csp{}


La création de scénarios interactifs possède des similarités avec le développement logiciel, il s'agit de décrire un comportement d'exécution.

\emph{Quelle est la souplesse d'édition dans le cas du développement logiciel?}

Dans le cas du développement classique\footnote{Écriture de code source sous forme de texte, puis compilation.}, la souplesse à l'édition est totale. J'entends par là que l'on est autorisé à passer par des états non valides pendant le processus de développement. Cela est d'ailleurs indispensable car il n'est pas concevable pour un humain d'écrire à plusieurs endroits à la fois des éléments syntaxiques complets.

Ceci n'est d'ailleurs pas un problème car avant de pouvoir être exécuté le code va passer par une étape de validation et de compilation\footnote{Pour les langages interprétés, on validera simplement l'intégrité du code fourni, dans la plupart des cas.}, où tout code non valide est rejeté.

%De plus, un code valide peut indiquer des avertissements, %TODO: expliciter

Ceci étant, avec un langage graphique nous pouvons très bien passer d'un état valide à un état valide sans passer par un état invalide, c'est ce qui est fait en général.%TODO: ref a d'autre langage graphique et le contre-exemple xcode



\subsection{Détecter les dépendances de souplesse}

Une dépendance de souplesse et une contrainte souple fortement liée à un autre contrainte souple la précédant, dans un tel cas la première contrainte ne pourra pas être déclenchée manuellement (sauf jeton passif sur l'autre).


En ce qui concerne la propagation des contraintes, il reste des choses à préciser :
dans quel but?
quelle contrainte?
le min des max est-il plus pertinent que le max des max?
trouver un cas concret?

\section{Contraintes pour l'exécution}

\subsection{Comportement des automates}%---------------------------------------------
\label{passage:automates}
L'étude du système d'exécution à révélé des failles, c'est à dire que des cas considérés valides(schema3) peuvent résulter en des exécutions incorrectes.
 Actuellement, le moteur exécute une machine à État qui est créé à partir d'un système d'automates temporisés(schema4). Actuellement la traduction depuis le scénario vers les automates se fait de façon directe à partir des relations temporelles présentes.  avant de continuer considérons la représentations suivantes pour les scénarios :
On considère les scénarios comme un grahe(TODO : graphe fig 2) avec des noeud représentant les \glspl{timenode} et les arrêtes représentant des contraintes. Ce graphe est non orienté car non avons vus qu'une contrainte situé en aval peut impacter celles en amont.
Maintenant, si nous voulons représenter le scénario par des graphes après traduction vers des automates nous devons en revanche orienter les arrêtes(schema5) car ces automates n'intègre pas de relation de causalité avec des éléments futurs.  le CSP n'ayans pas de problème pour résoudre ce genre de cas une des solutions pourrait être de de faire appel à celui-ci au monde exécution,  plusieurs problèmes se posent :  la première est qu'actuellement la seule étape sur laquelle nous avons un contrôle est l'étape de traduction qui est préalable à l'exécution nous ne contrôlons pas l'exécution ; le second est la complexité des algorithmes qu'ils font tourner le CSP cela rend l'exécution temps réel très difficile voire impossible.

Ceci étant, il n'est pas du tout exclu que le moteur fasse appelle le CSP lors de la phase de traduction où la problématique de temps réel ne se pose pas.

Une approche consiste alors à modéliser le fonctionnement des automates avec un système de contraintes adapté. Il en résultera un modèle(TODO: ref shema 1) qui, s'il est valide, assure le bon déroulement du scénario avec les automates. Les questions suivantes se posent: comment exprimer les contraintes des automates, et comment modifier les scénario non valides pour les rendre valides. Faire cette traduction nous permet de garantir un fonctionnement sans erreur car c'est précisément le problème que l'on exprime.

Concernant les modifications à apporter, il y à beaucoup de solutions, mais mettons nous d'accord sur les objectifs : 
\begin{itemize}
\item le comportement du scénario lors de l'exécution doit être strictement conforme au spécification OSSIA vis-à-vis du modèle d'origine ;
\item le nombre d'éléments (automates) ajoutés doit être minimal.
\end{itemize}












%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








\chapter{Implémentations}
Dans cette partie, nous nous intéressons à la mise en oeuvre technique des différents concept abordés. Tout d'abord, intéressons-nous à l'agencement des différentes briques logicielles qui composent \iscore{}.

\schema{archi}{figarchi}{Le CSP est utilisé par l'interface pour la configuration graphique ainsi que pour de la pré-validation, il est également utilisé par le moteur pour une étape de validation et de pré-processing.}

\section{API \ossia{}}
L'API \ossia{} est un ensemble de classes C++ représentant les différents éléments scénaristiques, les timenodes, les relations temporelles, etc... Elle permet aux différents organes d'\iscore{} de communiquer

\section{TDD}

\begin{wrapfigure}{r}{0.3\textwidth}
    \centering
    \illustrationKeepDim{niveauxTest}
    \caption{ Les différents niveaux des composants de l'application.\label{figNiveauTests}}
\end{wrapfigure}

J'utilise le \acrfull{tdd} dans ma méthode de développement, les tests écrit doivent permettre de vérifier le bon fonctionnement du solveur à l'exécution. On évitera ainsi la régression est on assurera la validité du système chaque mise à jour.

Les tests écrits couvrent le code en partant des fonctionnalités de bas niveau jusqu'aux fonctionnalités de haut niveau (cf. figure \ref{figNiveauTests}).

\emph{Comment valider le solveur?}
Nous nous intéresseront ici uniquement a la manière de tester du solveur. Par tester le solveur on entend prouver le fonctionnement du solveur, pour cela nous étudieront le système de contraintes d'un point de vue mathématique pour essayer de réduire les tests à des exemples minimaux.

\subsubsection{Propagation des contraintes}
Les deux opération de composition de base des contraintes sont la composition en parallèle et en série. À la manière des circuit électroniques, on montre que l'on peux toujours prendre deux points et calculer la contrainte équivalente.

\begin{figure}[ht]
    \centering
    \illustrationKeepDim{preuve1}
    \caption{Composition en série de deux contraintes. \label{figSerie}}
\end{figure}
\setcounter{equation}{0}
Sachant deux timenodes \timeNode{1}~et \timeNode{2}~reliés ensemble par un contrainte \contrainte{1}, et un timenode \timeNode{3} relié à \timeNode{2} par une contrainte \contrainte{2} (cf. figure \ref{figSerie}), on a :
\begin{gather} 
    \timeNode{1} + \buteeMin{1} \leq \timeNode{2} \leq \timeNode{1} + \buteeMax{1}\\
    \timeNode{2} + \buteeMin{2} \leq \timeNode{3} \leq \timeNode{2} + \buteeMax{2}
\end{gather}
L'équation étant compatible avec l'addition, et grâce à la transitivité on peut écrire ceci : 
\begin{equation}
    \timeNode{1} + \buteeMin{1} + \timeNode{2} + \buteeMin{2} \leq \timeNode{2} + \timeNode{3} \leq \timeNode{1} + \buteeMax{1} +         \timeNode{2} + \buteeMax{2}
\end{equation} 
On supprime T2 :
\begin{equation}
    \timeNode{1} + \buteeMin{1} + \buteeMin{2} \leq + \timeNode{3} \leq \timeNode{1} + \buteeMax{1} + \buteeMax{2}
\end{equation}
On peut alors définir une contrainte \contrainte{3}~reliant \timeNode{1} à \timeNode{3} telle que : 

\begin{gather}
    \buteeMin{3} = \buteeMin{1} + \buteeMin{2}\\
    \buteeMax{3} = \buteeMax{1} + \buteeMax{2}\\
    \timeNode{1} + \buteeMin{3} \leq \timeNode{3} \leq \timeNode{1} + \buteeMax{3}
\end{gather}
\setcounter{equation}{0}

En répétant l'opération, on peut désormais réduire un enchaînement "horizontal" d'un nombre finit de contraintes à une seule.

\begin{figure}[ht]
    \centering
    \illustrationKeepDim{preuve2}
    \caption{Composition en parallèle de deux contraintes. \label{figParallele}}
\end{figure}
Sachant deux timenodes \timeNode{1}~et \timeNode{2}~reliés ensemble par deux contraintes \contrainte{1}~et\contrainte{2} (cf. figure \ref{figParallele}), on a :
\begin{gather} 
    \timeNode{1} + \buteeMin{1} \leq \timeNode{2} \leq \timeNode{1} + \buteeMax{1}\\
    \timeNode{1} + \buteeMin{2} \leq \timeNode{2} \leq \timeNode{1} + \buteeMax{2}
\end{gather}
On décrit les fonctions min et max telles que : 
\begin{gather}
    \mathrm{min}(a,b) = \left\{\begin{matrix}
        a~\text{si}~a\leq b \\
        b~\text{sinon}
        \end{matrix}\right.\\
    \mathrm{max}(a,b) = \left\{\begin{matrix}
        a~\text{si}~a\geq b \\
        b~\text{sinon}
        \end{matrix}\right.
\end{gather}
Grâce à la transitivité, on peut alors écrire ceci :
\begin{equation}
    \begin{split}
        \timeNode{1} + \mathrm{min}(\buteeMin{1}, \buteeMin{2})\\
        &\quad \leq \timeNode{1} + \mathrm{max}(\buteeMin{1}, \buteeMin{2})\\
        &\quad \leq \timeNode{2}\\
        &\quad \leq \timeNode{1} + \mathrm{min}(\buteeMax{1}, \buteeMax{2})\\
        &\quad \leq \timeNode{1} + \mathrm{max}(\buteeMax{1}, \buteeMax{2})
    \end{split}
\end{equation} 
En retirant les variable inutiles, on obtient :
\begin{equation}
    \timeNode{1} + \mathrm{max}(\buteeMin{1}, \buteeMin{2}) \leq \timeNode{2} \leq \timeNode{1} + \mathrm{min}(\buteeMax{1}, \buteeMax{2})
\end{equation} 
On peut alors définir une contrainte \contrainte{3}~reliant \timeNode{1} à \timeNode{2} telle que :
\begin{gather}
    \buteeMin{3} = \mathrm{max}(\buteeMin{1}, \buteeMin{2})\\
    \buteeMax{3} = \mathrm{min}(\buteeMax{1}, \buteeMax{2})\\
    \timeNode{1} + \buteeMin{3} \leq \timeNode{2} \leq \timeNode{1} + \buteeMax{3}
\end{gather}

En répétant l'opération, on peut désormais réduire un nombre finit de combinaison de contraintes à une seule contrainte.

Par construction, un scénario et un enchaînement de contraintes combinée horizontalement ou verticalement, on peut alors se réduire à tester les combinaisons de deux contraintes.

et comme décrire les types de scénarios à tester sont fastidieux à exprimer avec des mots, je m'appuie sur une description graphique.
Certains cas sont impossible directement par la construction des contraintes :
\begin{itemize}
    \item Impossible de mettre une souplesse amont infinie;
    \item Impossible de mettre une durée nominale infinie;
    \item Impossible de mettre des valeurs négative pour les durées;
    \item Impossible d'avoir plusieurs Start;
    \item Impossible d'avoir une timenode sans contrainte à sa gauche, (sauf start).
\end{itemize}


\section{Algorithme de propagation}
On souhaite construire un algorithme efficace qui nous permet de répondre a notre problème :
Les données :
\begin{itemize}
\item des dates
\item des intervalles de temps entre des dates
\end{itemize}

La premiere question :
Les données :
\begin{itemize}
\item Les dates fournies peuvent-elles exister dans ces intervalles de temps ?
\item (Sinon quelles dates sont incohérentes ?)
\item Tous les intervalles de temps peuvent-il être respectés ?
\item (Sinon, quels intervalles en tords ?)
\end{itemize}

Dans un premier temps, nous essayons de propager les minimums et maximum. Pour orienter les recherches on s'inspirera d'un système mécanique.

\begin{algorithmic}

\IF {$i\geq 5$} 
        \STATE $i\gets i-1$
\ELSE
        \IF {$i\leq 3$}
                \STATE $i\gets i+2$
        \ENDIF
\ENDIF 
\end{algorithmic}

quand la date n'est pas fixée, Time

MIN :
si date
return date
sinon
min1 = Cprev.min + Tprev.min || Time
min2 = Tnext.min - Cnext.max || Time
return max(min1, min2)

MAX :
si date
date
sinon
max1 = Cprev.max + Tprev.max || infinity
max2 = Tnext.max - Cnext.min || infinity
return min(max1, max2)

